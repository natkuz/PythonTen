# üìå–°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∏ (–∏–ª–∏ –±–æ–ª–µ–µ) –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä —Ä—ã–±—ã, –ø—Ç–∏—Ü—ã –∏ —Ç.–ø.
# üìå–£ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫ –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–º—è, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∞.
# üìå–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.

# –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–¥–∞—á—É
# –í—ã–Ω–µ—Å–∏—Ç–µ –æ–±—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–ª–∞—Å—Å
# –ñ–∏–≤–æ—Ç–Ω–æ–µ.
# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞—Å–ª–µ–¥—É–π—Ç–µ –æ—Ç –Ω–µ–≥–æ.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∫–ª–∞—Å—Å—ã –≤–Ω–µ—Å–µ–Ω—ã –ø—Ä–∞–≤–∫–∏.

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ–∞–±—Ä–∏–∫—É.
# ‚óã –ö–ª–∞—Å—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤)
# –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.
# ‚óã –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏
# –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –∏–∑ –∫–ª–∞—Å—Å–∞-—Ñ–∞–±—Ä–∏–∫–∏.

from random import choice

class Factory:
    ears_list = ['big round ears', 'little round ears', 'big triangle ears', 'little tryangle ears', 'ears like hairs']
    wool_list = ['curly wool', 'long smooth wool', 'shaggy wool', 'fluffy wool']
    wool_color_list = ['red', 'grey', 'striped', 'spotted', 'black']
    eyes_list = ['green eyes', 'orange eyes', 'yellow eyes', 'brown eyes', 'black eyes']
    paws_list = ['soft paws', 'clawed paws', 'hooves']
    tails_list = ['striped tail', 'long tail', 'short tail', 'ring tail']

    def __init__(self, type_animal: str, name: str, age: int, special: str = None):
        self.type_animal = type_animal
        self._name = name
        self._age = age
        self._special = special

    def new_animal(self):
        self._ears = choice(self.ears_list)
        self._wool = choice(self.wool_list)
        self._wool_color = choice(self.wool_color_list)
        self._eye = choice(self.eyes_list)
        self._paw = choice(self.paws_list)
        self._tail = choice(self.tails_list)
        self.n_animal = [self.type_animal, 'name ' + self._name, 'age ' + str(self._age) + ' year(s)',
                         self._ears, self._wool_color + ' ' + self._wool, self._eye, self._paw, self._tail,
                         "just lucky" if self._special is None else self._special]
        return self.n_animal


class Animal:

    def __init__(self, name: str, age: int, special: str):
        self._name = name
        self._age = age
        self._special = special

    def get_special(self):
        return self._special


class Dog(Animal):

    def __init__(self, name: str, age: int, **kwargs):
        super().__init__(name, age, kwargs.get('breed', None))


class Cat(Animal):

    def __init__(self, name: str, age: int, **kwargs):
        super().__init__(name, age, kwargs.get('color', None))


class Fish(Animal):

    def __init__(self, name: str, age: int, **kwargs):
        super().__init__(name, age, kwargs.get('habitat', None))


# spanky = Dog('Spanky', 3, breed='spaniel')
# tom = Cat('Tom', 15, color='blue')
# dory = Fish('Dory', 4, habitat='home')
#
# for animal in [spanky, tom, dory]:
#     print(animal.get_special())

an = Factory('cat', 'Lapa', 1)
print(an.new_animal())